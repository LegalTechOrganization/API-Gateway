#!/usr/bin/env python3
"""
–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ chat-service Kafka –∫–∞–∫ Gateway
–ü–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ Chat Service –∫–æ–º–∞–Ω–¥—ã
"""

import json
import uuid
from datetime import datetime
import asyncio
import sys

try:
    from aiokafka import AIOKafkaProducer
    from aiokafka.errors import KafkaError
except ImportError:
    print("‚ùå aiokafka –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install aiokafka")
    sys.exit(1)


async def test_kafka_connection():
    """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ chat-service Kafka –∫–∞–∫ Gateway"""
    bootstrap_servers = "host.docker.internal:9095"  # –ö–∞–∫ Gateway
    
    print(f"üîç –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ {bootstrap_servers}...")
    
    producer = None
    try:
        # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫–∞–∫ Gateway
        producer = AIOKafkaProducer(
            bootstrap_servers=[bootstrap_servers],
            value_serializer=lambda v: json.dumps(v).encode('utf-8'),
            key_serializer=lambda k: k.encode('utf-8') if k else None,
            request_timeout_ms=30000,  # 30 —Å–µ–∫—É–Ω–¥ timeout
            retry_backoff_ms=1000,
            retries=3
        )
        
        print("üîå –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ Kafka...")
        await producer.start()
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Kafka —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç —Å–æ–±—ã—Ç–∏–µ
        request_id = str(uuid.uuid4())
        test_event = {
            "message_id": str(uuid.uuid4()),
            "request_id": request_id,
            "operation": "chat_create_conversation",
            "timestamp": datetime.utcnow().isoformat() + "Z",
            "payload": {
                "title": "Test from Gateway simulation",
                "user_context": {
                    "email": "test@gateway.com",
                    "full_name": "Gateway Test User",
                    "active_org_id": "test-org",
                    "org_role": "admin",
                    "is_org_owner": True
                },
                "request_metadata": {
                    "source_ip": "192.168.1.100",
                    "user_agent": "Gateway-Test/1.0",
                    "gateway_request_id": f"gw-test-{uuid.uuid4()}",
                    "timestamp": datetime.utcnow().isoformat() + "Z"
                }
            }
        }
        
        topic = "chat-service-create-conversation"
        print(f"üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ –≤ —Ç–æ–ø–∏–∫: {topic}")
        print(f"üÜî Request ID: {request_id}")
        
        await producer.send_and_wait(topic, value=test_event, key=request_id)
        print("‚úÖ Gateway ‚Üí Chat Service Kafka connection successful!")
        print(f"üì§ Sent test event to {topic}")
        print("üìã Event payload:")
        print(json.dumps(test_event, indent=2, ensure_ascii=False))
        
        return True
        
    except KafkaError as e:
        print(f"‚ùå Kafka Error: {e}")
        return False
    except Exception as e:
        print(f"‚ùå Gateway ‚Üí Chat Service Kafka connection failed: {e}")
        return False
    finally:
        if producer:
            await producer.stop()
            print("üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Kafka –∑–∞–∫—Ä—ã—Ç–æ")


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üß™ –¢–µ—Å—Ç Gateway ‚Üí Chat Service Kafka –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏")
    print("=" * 50)
    
    success = await test_kafka_connection()
    
    print("=" * 50)
    if success:
        print("üéâ –¢–ï–°–¢ –ü–†–û–ô–î–ï–ù! Gateway –º–æ–∂–µ—Ç –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Chat Service Kafka")
        print("‚úÖ –ì–æ—Ç–æ–≤–æ –∫ —Ä–µ–∞–ª—å–Ω–æ–π –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏!")
    else:
        print("‚ö†Ô∏è  –¢–ï–°–¢ –ù–ï –ü–†–û–ô–î–ï–ù! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ:")
        print("   1. Chat Service Kafka –∑–∞–ø—É—â–µ–Ω –Ω–∞ localhost:9095")
        print("   2. –¢–æ–ø–∏–∫ chat-service-create-conversation —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        print("   3. –ù–µ—Ç –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ firewall")
        print("   4. Docker DNS –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")


if __name__ == "__main__":
    asyncio.run(main())
