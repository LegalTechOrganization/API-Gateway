import os
import json
import asyncio
from typing import Dict, Any, Optional
from aiokafka import AIOKafkaProducer, AIOKafkaConsumer
from aiokafka.errors import KafkaError


class KafkaService:
    def __init__(self):
        self.bootstrap_servers = os.getenv("KAFKA_BOOTSTRAP_SERVERS", "localhost:9092")
        self.producer: Optional[AIOKafkaProducer] = None
        self.consumer: Optional[AIOKafkaConsumer] = None

    async def start_producer(self):
        """–ó–∞–ø—É—Å–∫ Kafka producer"""
        if not self.producer:
            try:
                self.producer = AIOKafkaProducer(
                    bootstrap_servers=self.bootstrap_servers,
                    value_serializer=lambda v: json.dumps(v).encode('utf-8'),
                    key_serializer=lambda k: k.encode('utf-8') if k else None
                )
                await self.producer.start()
                print(f"‚úÖ Kafka producer —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ {self.bootstrap_servers}")
            except Exception as e:
                print(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Kafka: {e}")
                print("üìù –°–µ—Ä–≤–∏—Å –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ Kafka (—Å–æ–±—ã—Ç–∏—è –Ω–µ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è)")
                self.producer = None

    async def stop_producer(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ Kafka producer"""
        if self.producer:
            await self.producer.stop()
            self.producer = None

    async def send_message(self, topic: str, message: Dict[str, Any], key: Optional[str] = None):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Kafka"""
        if not self.producer:
            return False
        
        try:
            await self.producer.send_and_wait(topic, value=message, key=key)
            return True
        except KafkaError as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Kafka: {e}")
            return False

    async def start_consumer(self, topic: str, group_id: str):
        """–ó–∞–ø—É—Å–∫ Kafka consumer"""
        if not self.consumer:
            self.consumer = AIOKafkaConsumer(
                topic,
                bootstrap_servers=self.bootstrap_servers,
                group_id=group_id,
                value_deserializer=lambda m: json.loads(m.decode('utf-8')),
                key_deserializer=lambda k: k.decode('utf-8') if k else None,
                auto_offset_reset='earliest',
                enable_auto_commit=True
            )
            await self.consumer.start()

    async def stop_consumer(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ Kafka consumer"""
        if self.consumer:
            await self.consumer.stop()
            self.consumer = None

    async def consume_messages(self, callback):
        """–ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ Kafka"""
        if not self.consumer:
            raise RuntimeError("Consumer –Ω–µ –∑–∞–ø—É—â–µ–Ω. –í—ã–∑–æ–≤–∏—Ç–µ start_consumer() —Å–Ω–∞—á–∞–ª–∞.")
        
        try:
            async for message in self.consumer:
                await callback(message)
        except KafkaError as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ Kafka: {e}")

    async def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π"""
        await self.stop_producer()
        await self.stop_consumer()


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä Kafka —Å–µ—Ä–≤–∏—Å–∞
kafka_service = KafkaService()


async def send_auth_event(event_type: str, data: Dict[str, Any]):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—ã—Ç–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤ Kafka"""
    try:
        message = {
            "event_type": event_type,
            "timestamp": asyncio.get_event_loop().time(),
            "data": data
        }
        
        await kafka_service.send_message("auth-events", message, key=event_type)
    except Exception as e:
        print(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å auth —Å–æ–±—ã—Ç–∏–µ –≤ Kafka: {e}")


async def send_user_event(event_type: str, data: Dict[str, Any]):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—ã—Ç–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Kafka"""
    try:
        message = {
            "event_type": event_type,
            "timestamp": asyncio.get_event_loop().time(),
            "data": data
        }
        
        await kafka_service.send_message("user-events", message, key=event_type)
    except Exception as e:
        print(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å user —Å–æ–±—ã—Ç–∏–µ –≤ Kafka: {e}")


async def send_organization_event(event_type: str, data: Dict[str, Any]):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—ã—Ç–∏—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –≤ Kafka"""
    try:
        message = {
            "event_type": event_type,
            "timestamp": asyncio.get_event_loop().time(),
            "data": data
        }
        
        await kafka_service.send_message("organization-events", message, key=event_type)
    except Exception as e:
        print(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å organization —Å–æ–±—ã—Ç–∏–µ –≤ Kafka: {e}")


