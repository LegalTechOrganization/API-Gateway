import os
import json
import asyncio
from typing import Dict, Any, Optional
from aiokafka import AIOKafkaProducer, AIOKafkaConsumer
from aiokafka.errors import KafkaError


class KafkaService:
    def __init__(self):
        # –û–±—â–∏–π –∫–ª–∞—Å—Ç–µ—Ä Kafka (–¥–ª—è –æ–±—â–∏—Ö —Å–æ–±—ã—Ç–∏–π)
        self.bootstrap_servers = os.getenv("KAFKA_BOOTSTRAP_SERVERS", "localhost:9092")
        self.producer: Optional[AIOKafkaProducer] = None
        self.consumer: Optional[AIOKafkaConsumer] = None

        # –û—Ç–¥–µ–ª—å–Ω—ã–π –∫–ª–∞—Å—Ç–µ—Ä Kafka –¥–ª—è chat-service (–ø–æ —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤—É)
        self.chat_bootstrap_servers = os.getenv(
            "CHAT_SERVICE_KAFKA_BOOTSTRAP_SERVERS",
            os.getenv("KAFKA_BOOTSTRAP_SERVERS", "localhost:9092")
        )
        self.chat_producer: Optional[AIOKafkaProducer] = None
        self.chat_consumer: Optional[AIOKafkaConsumer] = None

        # –¢–æ–ø–∏–∫–∏ chat-service –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è (—Å –¥–µ—Ñ–æ–ª—Ç–∞–º–∏)
        self.chat_responses_topic = os.getenv("CHAT_SERVICE_RESPONSES_TOPIC", "chat-service-responses")
        self.chat_events_topic = os.getenv("CHAT_SERVICE_EVENTS_TOPIC", "chat-service-events")
        
        # –¢–æ–ø–∏–∫–∏ –¥–ª—è ChatGPT UI Server
        self.chat_ui_conversations_topic = os.getenv("CHAT_UI_CONVERSATIONS_TOPIC", "chat-ui-conversations")
        self.chat_ui_messages_topic = os.getenv("CHAT_UI_MESSAGES_TOPIC", "chat-ui-messages")
        self.chat_ui_ai_conversation_topic = os.getenv("CHAT_UI_AI_CONVERSATION_TOPIC", "chat-ui-ai-conversation")
        self.chat_ui_gen_title_topic = os.getenv("CHAT_UI_GEN_TITLE_TOPIC", "chat-ui-gen-title")
        self.chat_ui_upload_conversations_topic = os.getenv("CHAT_UI_UPLOAD_CONVERSATIONS_TOPIC", "chat-ui-upload-conversations")
        self.chat_ui_prompts_topic = os.getenv("CHAT_UI_PROMPTS_TOPIC", "chat-ui-prompts")
        self.chat_ui_documents_topic = os.getenv("CHAT_UI_DOCUMENTS_TOPIC", "chat-ui-documents")
        self.chat_ui_settings_topic = os.getenv("CHAT_UI_SETTINGS_TOPIC", "chat-ui-settings")

    async def start_producer(self):
        """–ó–∞–ø—É—Å–∫ Kafka producer"""
        if not self.producer:
            try:
                self.producer = AIOKafkaProducer(
                    bootstrap_servers=self.bootstrap_servers,
                    value_serializer=lambda v: json.dumps(v).encode('utf-8'),
                    key_serializer=lambda k: k.encode('utf-8') if k else None
                )
                await self.producer.start()
                print(f"‚úÖ Kafka producer —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ {self.bootstrap_servers}")
            except Exception as e:
                print(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Kafka: {e}")
                print("üìù –°–µ—Ä–≤–∏—Å –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ Kafka (—Å–æ–±—ã—Ç–∏—è –Ω–µ –±—É–¥—É—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è)")
                self.producer = None
        
        # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –¢–∞–∫–∂–µ –∑–∞–ø—É—Å–∫–∞–µ–º chat producer
        await self.start_chat_producer()

    async def stop_producer(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ Kafka producer"""
        if self.producer:
            await self.producer.stop()
            self.producer = None

    # Chat-service producer lifecycle
    async def start_chat_producer(self):
        """–ó–∞–ø—É—Å–∫ Kafka producer –¥–ª—è chat-service (–æ—Ç–¥–µ–ª—å–Ω—ã–π –∫–ª–∞—Å—Ç–µ—Ä)"""
        if not self.chat_producer:
            try:
                self.chat_producer = AIOKafkaProducer(
                    bootstrap_servers=self.chat_bootstrap_servers,
                    value_serializer=lambda v: json.dumps(v).encode('utf-8'),
                    key_serializer=lambda k: k.encode('utf-8') if k else None
                )
                await self.chat_producer.start()
                print(f"‚úÖ Chat Kafka producer –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ {self.chat_bootstrap_servers}")
            except Exception as e:
                print(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Chat Kafka: {e}")
                self.chat_producer = None

    async def stop_chat_producer(self):
        if self.chat_producer:
            await self.chat_producer.stop()
            self.chat_producer = None

    async def send_message(self, topic: str, message: Dict[str, Any], key: Optional[str] = None):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Kafka"""
        if not self.producer:
            return False
        
        try:
            await self.producer.send_and_wait(topic, value=message, key=key)
            return True
        except KafkaError as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Kafka: {e}")
            return False

    async def send_chat_message(self, topic: str, message: Dict[str, Any], key: Optional[str] = None):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ chat Kafka –∫–ª–∞—Å—Ç–µ—Ä"""
        if not self.chat_producer:
            return False
        try:
            await self.chat_producer.send_and_wait(topic, value=message, key=key)
            return True
        except KafkaError as e:
            print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Chat Kafka: {e}")
            return False

    async def start_consumer(self, topic: str, group_id: str):
        """–ó–∞–ø—É—Å–∫ Kafka consumer"""
        if not self.consumer:
            self.consumer = AIOKafkaConsumer(
                topic,
                bootstrap_servers=self.bootstrap_servers,
                group_id=group_id,
                value_deserializer=lambda m: json.loads(m.decode('utf-8')),
                key_deserializer=lambda k: k.decode('utf-8') if k else None,
                auto_offset_reset='earliest',
                enable_auto_commit=True
            )
            await self.consumer.start()

    async def start_chat_consumer(self, topic: str, group_id: str):
        """–ó–∞–ø—É—Å–∫ chat Kafka consumer (–æ—Ç–¥–µ–ª—å–Ω—ã–π –∫–ª–∞—Å—Ç–µ—Ä)"""
        if not self.chat_consumer:
            self.chat_consumer = AIOKafkaConsumer(
                topic,
                bootstrap_servers=self.chat_bootstrap_servers,
                group_id=group_id,
                value_deserializer=lambda m: json.loads(m.decode('utf-8')),
                key_deserializer=lambda k: k.decode('utf-8') if k else None,
                auto_offset_reset='earliest',
                enable_auto_commit=True
            )
            await self.chat_consumer.start()

    async def stop_consumer(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ Kafka consumer"""
        if self.consumer:
            await self.consumer.stop()
            self.consumer = None

    async def stop_chat_consumer(self):
        if self.chat_consumer:
            await self.chat_consumer.stop()
            self.chat_consumer = None

    async def consume_messages(self, callback):
        """–ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ Kafka"""
        if not self.consumer:
            raise RuntimeError("Consumer –Ω–µ –∑–∞–ø—É—â–µ–Ω. –í—ã–∑–æ–≤–∏—Ç–µ start_consumer() —Å–Ω–∞—á–∞–ª–∞.")
        
        try:
            async for message in self.consumer:
                await callback(message)
        except KafkaError as e:
            print(f"–û—à–∏–±–∫–∞ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ Kafka: {e}")

    async def close(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π"""
        await self.stop_producer()
        await self.stop_consumer()
        await self.stop_chat_producer()
        await self.stop_chat_consumer()


# –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä Kafka —Å–µ—Ä–≤–∏—Å–∞
kafka_service = KafkaService()


async def send_auth_event(event_type: str, data: Dict[str, Any]):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—ã—Ç–∏—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏ –≤ Kafka"""
    try:
        message = {
            "event_type": event_type,
            "timestamp": asyncio.get_event_loop().time(),
            "data": data
        }
        
        await kafka_service.send_message("auth-events", message, key=event_type)
    except Exception as e:
        print(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å auth —Å–æ–±—ã—Ç–∏–µ –≤ Kafka: {e}")


async def send_user_event(event_type: str, data: Dict[str, Any]):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—ã—Ç–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Kafka"""
    try:
        message = {
            "event_type": event_type,
            "timestamp": asyncio.get_event_loop().time(),
            "data": data
        }
        
        await kafka_service.send_message("user-events", message, key=event_type)
    except Exception as e:
        print(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å user —Å–æ–±—ã—Ç–∏–µ –≤ Kafka: {e}")


async def send_organization_event(event_type: str, data: Dict[str, Any]):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—ã—Ç–∏—è –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏ –≤ Kafka"""
    try:
        message = {
            "event_type": event_type,
            "timestamp": asyncio.get_event_loop().time(),
            "data": data
        }
        
        await kafka_service.send_message("organization-events", message, key=event_type)
    except Exception as e:
        print(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å organization —Å–æ–±—ã—Ç–∏–µ –≤ Kafka: {e}")


# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê
# CHAT SERVICE KAFKA INTEGRATION - —Ç–æ—á–Ω–æ –∫–∞–∫ billing
# ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–æ–≤ –æ—Ç chat service
pending_chat_requests: Dict[str, asyncio.Future] = {}

async def send_chat_request(topic: str, message: Dict[str, Any]):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –≤ chat —Ç–æ–ø–∏–∫ - –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ billing"""
    success = await kafka_service.send_chat_message(topic, message, key=message["request_id"])
    if not success:
        raise Exception(f"Failed to send message to chat topic {topic}: chat producer not ready")

async def send_chat_ui_request(topic: str, message: Dict[str, Any]):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –≤ ChatGPT UI Server —Ç–æ–ø–∏–∫"""
    success = await kafka_service.send_chat_message(topic, message, key=message["request_id"])
    if not success:
        raise Exception(f"Failed to send message to chat UI topic {topic}: chat producer not ready")

async def wait_for_chat_response(request_id: str, timeout: float = 30.0) -> Dict[str, Any]:
    """–ñ–¥–µ—Ç –æ—Ç–≤–µ—Ç –∏–∑ chat-responses —Ç–æ–ø–∏–∫–∞ - –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ billing"""
    
    # –°–æ–∑–¥–∞–µ–º Future –¥–ª—è –æ–∂–∏–¥–∞–Ω–∏—è –æ—Ç–≤–µ—Ç–∞
    future = asyncio.Future()
    pending_chat_requests[request_id] = future
    
    try:
        # –ñ–¥–µ–º –æ—Ç–≤–µ—Ç —Å timeout
        response = await asyncio.wait_for(future, timeout=timeout)
        return response
    finally:
        # –û—á–∏—â–∞–µ–º pending request
        pending_chat_requests.pop(request_id, None)

async def start_chat_response_consumer():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç consumer –¥–ª—è chat-responses - –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ billing"""
    # –ü–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ responses-—Ç–æ–ø–∏–∫ –∏–∑ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    topic = kafka_service.chat_responses_topic
    await kafka_service.start_chat_consumer(topic=topic, group_id='api-gateway-chat')

    try:
        async for message in kafka_service.chat_consumer:
            response_data = message.value
            request_id = response_data.get("request_id")

            if request_id in pending_chat_requests:
                future = pending_chat_requests[request_id]
                if not future.done():
                    future.set_result(response_data)
    except Exception as e:
        print(f"Error in chat response consumer: {e}")
    finally:
        await kafka_service.stop_chat_consumer()

async def send_chat_event(event_type: str, data: Dict[str, Any]):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–±—ã—Ç–∏—è chat service –≤ Kafka –¥–ª—è –∞—É–¥–∏—Ç–∞"""
    try:
        message = {
            "event_type": event_type,
            "timestamp": asyncio.get_event_loop().time(),
            "data": data
        }
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º events-—Ç–æ–ø–∏–∫ chat-service
        await kafka_service.send_chat_message(kafka_service.chat_events_topic, message, key=event_type)
    except Exception as e:
        print(f"‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å chat —Å–æ–±—ã—Ç–∏–µ –≤ Kafka: {e}")

# –î–æ–±–∞–≤–∏—Ç—å –≤ startup –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
async def init_chat_kafka():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Kafka –¥–ª—è chat service - –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ billing"""
    await kafka_service.start_chat_producer()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º consumer –≤ —Ñ–æ–Ω–µ
    asyncio.create_task(start_chat_response_consumer())


