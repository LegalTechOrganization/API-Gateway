#!/usr/bin/env python3
"""
–ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç JWT —É—Ç–∏–ª–∏—Ç—ã –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
"""

import base64
import json

def decode_jwt_payload(token: str):
    """–î–µ–∫–æ–¥–∏—Ä—É–µ—Ç JWT —Ç–æ–∫–µ–Ω –±–µ–∑ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∏"""
    try:
        # –†–∞–∑–¥–µ–ª—è–µ–º —Ç–æ–∫–µ–Ω –Ω–∞ —á–∞—Å—Ç–∏
        parts = token.split('.')
        if len(parts) != 3:
            return None
        
        # –î–µ–∫–æ–¥–∏—Ä—É–µ–º payload (–≤—Ç–æ—Ä–∞—è —á–∞—Å—Ç—å)
        payload = parts[1]
        # –î–æ–±–∞–≤–ª—è–µ–º padding –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        payload += '=' * (4 - len(payload) % 4)
        
        # –î–µ–∫–æ–¥–∏—Ä—É–µ–º base64
        decoded = base64.urlsafe_b64decode(payload)
        
        # –ü–∞—Ä—Å–∏–º JSON
        return json.loads(decoded.decode('utf-8'))
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return None

def test_jwt_decoding():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ JWT"""
    
    # –¢–µ—Å—Ç–æ–≤—ã–π JWT —Ç–æ–∫–µ–Ω (–∏–∑ –≤–∞—à–µ–≥–æ –ø—Ä–∏–º–µ—Ä–∞)
    test_token = "eyJhbGciOiJSUzI1NiIsInR5cCIgOiAiSldUIiwia2lkIiA6ICIyMWxycmhaUFNVcXc3d0xjNGFoMmVfeUhGcXQ2NF95ZDdoZHpCZURTV1dVIn0.eyJleHAiOjE3NTQ5ODMwMDksImlhdCI6MTc1NDk4MjcwOSwianRpIjoib25ydHJvOjQ5ZmZlNWYwLTIwMDItZmExMS01ZWRkLWNjNzg5NGMzMGI4OSIsImlzcyI6Imh0dHA6Ly9rZXljbG9hazo4MDgwL3JlYWxtcy9hdXRoLXNlcnZpY2UiLCJhdWQiOiJhY2NvdW50Iiwic3ViIjoiMzgyOWU5M2UtZjEzNC00YTZmLTg1MjUtYzhlMmQyYjBhYWQxIiwidHlwIjoiQmVhcmVyIiwiYXpwIjoiYXV0aC1zZXJ2aWNlIiwic2lkIjoiM2E4Njc1MTQtZWQ3Yy00MWVkLWI3MzYtNTNiMDI2MjExOGE1IiwiYWNyIjoiMSIsImFsbG93ZWQtb3JpZ2lucyI6WyJodHRwOi8vbG9jYWxob3N0OjgwMDAiXSwicmVhbG1fYWNjZXNzIjp7InJvbGVzIjpbImRlZmF1bHQtcm9sZXMtYXV0aC1zZXJ2aWNlIiwib2ZmbGluZV9hY2Nlc3MiLCJ1bWFfYXV0aG9yaXphdGlvbiJdfSwicmVzb3VyY2VfYWNjZXNzIjp7ImFjY291bnQiOnsicm9sZXMiOlsibWFuYWdlLWFjY291bnQiLCJtYW5hZ2UtYWNjb3VudC1saW5rcyIsInZpZXctcHJvZmlsZSJdfX0sInNjb3BlIjoicHJvZmlsZSBlbWFpbCIsImVtYWlsX3ZlcmlmaWVkIjp0cnVlLCJuYW1lIjoiSHV1c2VyIEFjY291bnQiLCJwcmVmZXJyZWRfdXNlcm5hbWUiOiJodXVzZXJAZXhhbXBsZS5jb20iLCJnaXZlbl9uYW1lIjoiSHV1c2VyIiwiZmFtaWx5X25hbWUiOiJBY2NvdW50IiwiZW1haWwiOiJodXVzZXJAZXhhbXBsZS5jb20ifQ.aLFZJuRrzqMjzLR0sLEylXF8oyXBchJLNWktDKW5IuuX65c9EiUrK25gyZ4sgJgv_FtqMlft-tkWEXzVbt4AeZUED4ZbOflTedwQ_F-raFELO8XAiJ0-WGQuvQUnNkCRAc597T-BSs2qx_DuGuKm6eRXVd60_taxJQsmyv0zxX5QHhixWCW5CrS_jUISrog03PZyTZtGlzsdOHOqUFEF7aXDS54O6oyzK4UHccu8-vzcbttSbUBy_J0bKQRnhwlPJhJ_7-Uufx0gwfA3FvNudjgufJIs0bZVp8I2xOb6ReVtcF-TOYteaLMcyyXps2e7WKcnhAwzqzva1i_vGRFeoA"
    
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ JWT –±–µ–∑ –≤–Ω–µ—à–Ω–∏—Ö –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
    
    # –î–µ–∫–æ–¥–∏—Ä—É–µ–º payload
    payload = decode_jwt_payload(test_token)
    
    if payload:
        print("‚úÖ JWT payload —É—Å–ø–µ—à–Ω–æ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω!")
        print(f"   sub: {payload.get('sub')}")
        print(f"   email: {payload.get('email')}")
        print(f"   name: {payload.get('name')}")
        print(f"   preferred_username: {payload.get('preferred_username')}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∏–∑–≤–ª–µ—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        user_info = {
            "user_id": payload.get("sub", "unknown"),
            "email": payload.get("email", "unknown@example.com"),
            "full_name": payload.get("name") or payload.get("preferred_username")
        }
        
        print("\nüìã –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:")
        print(f"   user_id: {user_info['user_id']}")
        print(f"   email: {user_info['email']}")
        print(f"   full_name: {user_info['full_name']}")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ auth —Å–µ—Ä–≤–∏—Å–∞
        auth_response = {
            "access_token": test_token,
            "refresh_token": "test_refresh_token",
            "token_type": "Bearer",
            "expires_in": 300
        }
        
        result = {
            "jwt": auth_response.get("access_token"),
            "refresh_token": auth_response.get("refresh_token"),
            "user": {
                "user_id": user_info["user_id"],
                "email": user_info["email"],
                "full_name": user_info["full_name"],
                "orgs": []
            }
        }
        
        print("\nüîÑ –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç:")
        print(f"   jwt: {result['jwt'][:50]}...")
        print(f"   refresh_token: {result['refresh_token']}")
        print(f"   user.user_id: {result['user']['user_id']}")
        print(f"   user.email: {result['user']['email']}")
        print(f"   user.full_name: {result['user']['full_name']}")
        
    else:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞—Ç—å JWT payload")
    
    print("\nüéâ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω!")

if __name__ == "__main__":
    test_jwt_decoding()
