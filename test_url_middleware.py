#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã URL middleware
"""

import json
from utils.url_builder import get_gateway_base_url, replace_auth_urls_in_response


def test_url_builder():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ—Å—Ç—Ä–æ–µ–Ω–∏—è URL"""
    
    # –°–æ–∑–¥–∞–µ–º mock Request –æ–±—ä–µ–∫—Ç
    class MockRequest:
        def __init__(self, scheme, hostname, port):
            self.url = MockURL(scheme, hostname, port)
    
    class MockURL:
        def __init__(self, scheme, hostname, port):
            self.scheme = scheme
            self.hostname = hostname
            self.port = port
    
    # –¢–µ—Å—Ç 1: HTTP —Å –ø–æ—Ä—Ç–æ–º
    request1 = MockRequest("http", "localhost", 8002)
    assert get_gateway_base_url(request1) == "http://localhost:8002"
    
    # –¢–µ—Å—Ç 2: HTTPS –±–µ–∑ –ø–æ—Ä—Ç–∞
    request2 = MockRequest("https", "api.example.com", None)
    assert get_gateway_base_url(request2) == "https://api.example.com"
    
    # –¢–µ—Å—Ç 3: HTTP —Å –ø–æ—Ä—Ç–æ–º 80
    request3 = MockRequest("http", "example.com", 80)
    assert get_gateway_base_url(request3) == "http://example.com"
    
    print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã URL builder –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")


def test_url_replacement():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –∑–∞–º–µ–Ω—É URL auth —Å–µ—Ä–≤–∏—Å–∞"""
    
    gateway_base_url = "http://localhost:8002"
    
    # –¢–µ—Å—Ç 1: –ó–∞–º–µ–Ω–∞ URL auth —Å–µ—Ä–≤–∏—Å–∞
    data1 = {
        "sign_up_url": "http://host.docker.internal:8000/v1/client/sign-up",
        "sign_in_url": "http://localhost:8000/v1/client/sign-in/password"
    }
    expected1 = {
        "sign_up_url": "http://localhost:8002/v1/client/sign-up",
        "sign_in_url": "http://localhost:8002/v1/client/sign-in/password"
    }
    result1 = replace_auth_urls_in_response(data1, gateway_base_url)
    assert result1 == expected1
    
    # –¢–µ—Å—Ç 2: –û–±—ä–µ–∫—Ç —Å –≤–ª–æ–∂–µ–Ω–Ω—ã–º–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∞–º–∏
    data2 = {
        "links": {
            "auth": ["http://host.docker.internal:8000/v1/client/sign-up", "http://localhost:8000/v1/client/sign-in"],
            "api": "http://host.docker.internal:8000/v1/org"
        },
        "message": "Success"
    }
    expected2 = {
        "links": {
            "auth": ["http://localhost:8002/v1/client/sign-up", "http://localhost:8002/v1/client/sign-in"],
            "api": "http://localhost:8002/v1/org"
        },
        "message": "Success"
    }
    result2 = replace_auth_urls_in_response(data2, gateway_base_url)
    assert result2 == expected2
    
    # –¢–µ—Å—Ç 3: –°—Ç—Ä–æ–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —è–≤–ª—è—é—Ç—Å—è URL auth —Å–µ—Ä–≤–∏—Å–∞
    data3 = {
        "url": "http://host.docker.internal:8000/v1/client/sign-up",
        "text": "This is not a URL",
        "number": 123,
        "boolean": True,
        "other_url": "https://api.example.com/some/endpoint"
    }
    expected3 = {
        "url": "http://localhost:8002/v1/client/sign-up",
        "text": "This is not a URL",
        "number": 123,
        "boolean": True,
        "other_url": "https://api.example.com/some/endpoint"
    }
    result3 = replace_auth_urls_in_response(data3, gateway_base_url)
    assert result3 == expected3
    
    print("‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã URL replacement –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")


if __name__ == "__main__":
    print("üß™ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ URL middleware...")
    test_url_builder()
    test_url_replacement()
    print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
