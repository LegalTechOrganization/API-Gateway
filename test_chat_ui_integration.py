#!/usr/bin/env python3
"""
–¢–µ—Å—Ç—ã –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å ChatGPT UI Server —á–µ—Ä–µ–∑ Kafka
"""

import asyncio
import json
import uuid
from datetime import datetime
from typing import Dict, Any

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
from services.kafka_service import send_chat_ui_request, wait_for_chat_response, kafka_service

async def test_conversation_creation():
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Ä–∞–∑–≥–æ–≤–æ—Ä–∞"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Ä–∞–∑–≥–æ–≤–æ—Ä–∞...")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    kafka_message = {
        "message_id": str(uuid.uuid4()),
        "request_id": str(uuid.uuid4()),
        "timestamp": datetime.utcnow().isoformat() + "Z",
        "operation": "create_conversation",
        "payload": {
            "topic": "–¢–µ—Å—Ç–æ–≤—ã–π —Ä–∞–∑–≥–æ–≤–æ—Ä",
            "user_context": {
                "email": "test@example.com",
                "full_name": "Test User",
                "active_org_id": "org123",
                "org_role": "user",
                "is_org_owner": False
            },
            "request_metadata": {
                "source_ip": "127.0.0.1",
                "user_agent": "test-agent"
            }
        }
    }
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
        await send_chat_ui_request(kafka_service.chat_ui_conversations_topic, kafka_message)
        
        # –ñ–¥–µ–º –æ—Ç–≤–µ—Ç
        response = await wait_for_chat_response(kafka_message["request_id"], timeout=10.0)
        
        print(f"‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω: {response}")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

async def test_message_creation():
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è...")
    
    kafka_message = {
        "message_id": str(uuid.uuid4()),
        "request_id": str(uuid.uuid4()),
        "timestamp": datetime.utcnow().isoformat() + "Z",
        "operation": "create_message",
        "payload": {
            "conversation": 1,
            "message": "–ü—Ä–∏–≤–µ—Ç! –≠—Ç–æ —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.",
            "is_bot": False,
            "message_type": 0,
            "user_context": {
                "email": "test@example.com",
                "full_name": "Test User",
                "active_org_id": "org123",
                "org_role": "user",
                "is_org_owner": False
            },
            "request_metadata": {
                "source_ip": "127.0.0.1",
                "user_agent": "test-agent"
            }
        }
    }
    
    try:
        await send_chat_ui_request(kafka_service.chat_ui_messages_topic, kafka_message)
        response = await wait_for_chat_response(kafka_message["request_id"], timeout=10.0)
        
        print(f"‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω: {response}")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

async def test_ai_conversation():
    """–¢–µ—Å—Ç AI —Ä–∞–∑–≥–æ–≤–æ—Ä–∞"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º AI —Ä–∞–∑–≥–æ–≤–æ—Ä...")
    
    kafka_message = {
        "message_id": str(uuid.uuid4()),
        "request_id": str(uuid.uuid4()),
        "timestamp": datetime.utcnow().isoformat() + "Z",
        "operation": "ai_conversation",
        "payload": {
            "name": "gpt-3.5-turbo",
            "message": [
                {
                    "content": "–ü—Ä–∏–≤–µ—Ç! –ö–∞–∫ –¥–µ–ª–∞?",
                    "role": "user"
                }
            ],
            "conversationId": None,
            "max_tokens": 100,
            "temperature": 0.7,
            "top_p": 1,
            "frequency_penalty": 0,
            "presence_penalty": 0,
            "system_content": "You are a helpful assistant.",
            "openaiApiKey": "test-key",
            "frugalMode": False,
            "user_context": {
                "email": "test@example.com",
                "full_name": "Test User",
                "active_org_id": "org123",
                "org_role": "user",
                "is_org_owner": False
            },
            "request_metadata": {
                "source_ip": "127.0.0.1",
                "user_agent": "test-agent"
            }
        }
    }
    
    try:
        await send_chat_ui_request(kafka_service.chat_ui_ai_conversation_topic, kafka_message)
        response = await wait_for_chat_response(kafka_message["request_id"], timeout=30.0)
        
        print(f"‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω: {response}")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

async def test_prompt_creation():
    """–¢–µ—Å—Ç —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–º–ø—Ç–∞"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞...")
    
    kafka_message = {
        "message_id": str(uuid.uuid4()),
        "request_id": str(uuid.uuid4()),
        "timestamp": datetime.utcnow().isoformat() + "Z",
        "operation": "create_prompt",
        "payload": {
            "title": "–¢–µ—Å—Ç–æ–≤—ã–π –ø—Ä–æ–º–ø—Ç",
            "content": "–¢—ã –ø–æ–ª–µ–∑–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è.",
            "user_context": {
                "email": "test@example.com",
                "full_name": "Test User",
                "active_org_id": "org123",
                "org_role": "user",
                "is_org_owner": False
            },
            "request_metadata": {
                "source_ip": "127.0.0.1",
                "user_agent": "test-agent"
            }
        }
    }
    
    try:
        await send_chat_ui_request(kafka_service.chat_ui_prompts_topic, kafka_message)
        response = await wait_for_chat_response(kafka_message["request_id"], timeout=10.0)
        
        print(f"‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω: {response}")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

async def test_settings():
    """–¢–µ—Å—Ç –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫...")
    
    kafka_message = {
        "message_id": str(uuid.uuid4()),
        "request_id": str(uuid.uuid4()),
        "timestamp": datetime.utcnow().isoformat() + "Z",
        "operation": "get_settings",
        "payload": {}
    }
    
    try:
        await send_chat_ui_request(kafka_service.chat_ui_settings_topic, kafka_message)
        response = await wait_for_chat_response(kafka_message["request_id"], timeout=10.0)
        
        print(f"‚úÖ –û—Ç–≤–µ—Ç –ø–æ–ª—É—á–µ–Ω: {response}")
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return False

async def test_kafka_connection():
    """–¢–µ—Å—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Kafka"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Kafka...")
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º producer
        await kafka_service.start_chat_producer()
        
        if kafka_service.chat_producer:
            print("‚úÖ Chat Kafka producer –ø–æ–¥–∫–ª—é—á–µ–Ω")
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è
            test_message = {
                "test": "message",
                "timestamp": datetime.utcnow().isoformat()
            }
            
            success = await kafka_service.send_chat_message(
                "test-topic", 
                test_message, 
                key="test-key"
            )
            
            if success:
                print("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Kafka")
                return True
            else:
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Kafka")
                return False
        else:
            print("‚ùå Chat Kafka producer –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω")
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Kafka: {e}")
        return False

async def run_all_tests():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –≤—Å–µ —Ç–µ—Å—Ç—ã"""
    print("üöÄ –ó–∞–ø—É—Å–∫ —Ç–µ—Å—Ç–æ–≤ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ —Å ChatGPT UI Server")
    print("=" * 60)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Kafka
    await kafka_service.start_chat_producer()
    
    tests = [
        ("Kafka Connection", test_kafka_connection),
        ("Settings", test_settings),
        ("Conversation Creation", test_conversation_creation),
        ("Message Creation", test_message_creation),
        ("Prompt Creation", test_prompt_creation),
        ("AI Conversation", test_ai_conversation),
    ]
    
    results = []
    
    for test_name, test_func in tests:
        print(f"\nüìã {test_name}")
        print("-" * 40)
        
        try:
            result = await test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ {test_name}: {e}")
            results.append((test_name, False))
    
    # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–∏
    print("\n" + "=" * 60)
    print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –¢–ï–°–¢–û–í")
    print("=" * 60)
    
    passed = 0
    total = len(results)
    
    for test_name, result in results:
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"{test_name}: {status}")
        if result:
            passed += 1
    
    print(f"\nüìà –ò—Ç–æ–≥–æ: {passed}/{total} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == total:
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–π–¥–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
    else:
        print("‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –Ω–µ –ø—Ä–æ–π–¥–µ–Ω—ã")
    
    # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
    await kafka_service.stop_chat_producer()

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã
    asyncio.run(run_all_tests())
